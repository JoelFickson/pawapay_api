{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/resources/payments_page/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,4EAAoD;AACpD,uCAAqD;AAGrD,2EAAmD;AAIpC,IAAM,YAAY,GAAlB,MAAM,YAAY;IAIT;IAFL,YAAY,CAAC;IAE9B,YAAsB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAClD,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;IAC3C,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACI,KAAK,CAAC,eAAe,CAAC,WAAwB;QACnD,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;iBACrD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACvB,SAAS,EAAE,WAAW,CAAC,UAAU;gBACjC,MAAM,EAAE,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACpC,SAAS,EAAE,WAAW,CAAC,SAAS;gBAChC,OAAO,EAAE,WAAW,CAAC,qBAAqB;gBAC1C,MAAM,EAAE,WAAW,CAAC,MAAM;aAC3B,CAAC,CAAC;YAEL,wBAAc,CAAC,IAAI,CAAC,iDAAiD,EAAE,WAAW,CAAC,UAAU,EAAE,cAAc,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;YAElI,OAAO;gBACL,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,WAAW;gBACtC,KAAK,EAAE,KAAK;aACc,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,wBAAc,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;CACF,CAAA;AAnDoB,YAAY;IAFhC,IAAA,yBAAc,GAAE;IAChB,IAAA,oBAAS,GAAE;qCAK4B,wBAAc;GAJjC,YAAY,CAmDhC;kBAnDoB,YAAY","sourcesContent":["import NetworkHandler from \"@config/networkManager\";\nimport { autoInjectable, singleton } from \"tsyringe\";\nimport { InitiatePaymentResponse, PaymentData } from \"types/payments\";\nimport { PawaPayNetworkResponse } from \"types/pawaPayErrorResponse\";\nimport internalLogger from \"@utils/internalLogger\";\n\n@autoInjectable()\n@singleton()\nexport default class PaymentsPage {\n\n  private readonly baseEndpoint;\n\n  constructor(protected networkHandler: NetworkHandler) {\n    this.baseEndpoint = \"v1/widget/sessions\";\n  }\n\n  /**\n   * Initiates a payment process by sending payment data to v1/widget/sessions.\n   * This method constructs the payment request and handles the response, returning\n   * a URL to which the user can be redirected to complete the payment process.\n   *\n   * @param {PaymentData} paymentData - An object containing all necessary data for initiating the payment.\n   * The `PaymentData` object should include:\n   * - `deposit_id`: The ID of the deposit.\n   * - `price`: The amount of the payment.\n   * - `returnUrl`: The URL to which the user will be redirected after payment completion (can be specified in `.env` as `RETURN_URL`).\n   * - `basePaymentCountryIso`: ISO country code representing the base country for the payment.\n   * - `reason`: A text description of the reason for the payment.\n   *\n   * @returns {Promise<InitiatePaymentResponse | PawaPayNetworkResponse>} A promise that resolves to an object containing\n   * the `redirectUrl` for the payment completion if successful, and an `error` flag set to `false`.\n   * In case of failure, the promise may resolve to an `unknown` type or be rejected with an error.\n   * It's recommended to handle errors appropriately in the calling context.\n   *\n   * @throws {PawaPayNetworkResponse} Throws an error if the request fails for reasons such as network issues,\n   * invalid payment data, or server errors. `.\n   */\n  public async initiatePayment(paymentData: PaymentData): Promise<InitiatePaymentResponse | PawaPayNetworkResponse> {\n    try {\n      const response = await this.networkHandler.getInstance()\n        .post(this.baseEndpoint, {\n          depositId: paymentData.deposit_id,\n          amount: paymentData.price.toString(),\n          returnUrl: paymentData.returnUrl,\n          country: paymentData.basePaymentCountryIso,\n          reason: paymentData.reason\n        });\n\n      internalLogger.info(\"Sending payment initiation request for deposit:\", paymentData.deposit_id, \"with amount:\", paymentData.price);\n\n      return {\n        redirectUrl: response.data.redirectUrl,\n        error: false\n      } as InitiatePaymentResponse;\n    } catch (error: unknown) {\n      internalLogger.error(\"Payment initiation failed:\", error);\n      return this.networkHandler.handleErrors(error);\n    }\n  }\n}\n"]}