{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/resources/payouts/index.ts"],"names":[],"mappings":"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","sourcesContent":["import NetworkHandler from \"@config/networkManager\";\nimport { PawaPayPayoutTransaction, PayoutTransaction } from \"types/payout\";\nimport { autoInjectable, singleton } from \"tsyringe\";\nimport PawapayBaseService from \"@utils/pawapayBaseService\";\nimport { PawaPayNetworkResponse } from \"types/pawaPayErrorResponse\";\nimport internalLogger from \"@utils/internalLogger\";\n\n@autoInjectable()\n@singleton()\nexport default class Payouts {\n\n  private readonly baseEndpoint;\n\n  constructor(protected networkHandler: NetworkHandler, protected pawapayBaseService: PawapayBaseService) {\n    this.baseEndpoint = \"/payouts\";\n  }\n\n  /**\n   * Sends a payout transaction to the specified endpoint, processing the transaction\n   * details provided in the `transaction` parameter. It formats the phone number,\n   * logs the transaction details for debugging, and handles the server response.\n   *\n   * @param {PayoutTransaction} transaction - The payout transaction object containing all the necessary information\n   * for processing the payout. This includes:\n   *  - `phoneNumber`: The recipient's phone number.\n   *  - `amount`: The payout amount.\n   *  - `payoutId`: A unique identifier for the payout.\n   *  - `currency`: The currency code for the amount (e.g., USD, GBP).\n   *  - `correspondent`: The correspondent code for the transaction.\n   *  - `statementDescription`: A description for the statement.\n   *\n   * @returns {Promise<PawaPayPayoutTransaction | PawaPayNetworkResponse>} A promise that resolves to the payout transaction response object\n   * if the request is successful. The object includes all relevant details about the transaction response from the server.\n   * In the case of an error, the promise resolves to an `unknown` type that represents the handled error response.\n   *\n   * @throws {PawaPayNetworkResponse} This method may throw an error if the request fails due to reasons such as network issues,\n   * invalid transaction details, or server-side problems. Such errors are caught and handled by `networkHandler.handleErrors`.\n   */\n  async sendPayout(transaction: PayoutTransaction): Promise<PawaPayPayoutTransaction | PawaPayNetworkResponse> {\n\n    try {\n      const phoneNumber = this.pawapayBaseService.formatPhoneNumber(transaction.phoneNumber);\n\n      internalLogger.info(\"Sending payout to\" + phoneNumber + \" the amount of\" + transaction.amount +\n        \" with payoutId \" + transaction.payoutId + \"and currency\" + transaction.currency);\n\n      const response = await this.networkHandler.getInstance().post(\n        this.baseEndpoint,\n        {\n          payoutId: transaction.payoutId,\n          amount: transaction.amount.toString(),\n          currency: transaction.currency,\n          correspondent: transaction.correspondent,\n          recipient: {\n            type: \"MSISDN\",\n            address: { value: phoneNumber }\n          },\n          customerTimestamp: new Date().toISOString(),\n          statementDescription: transaction.statementDescription\n        }\n      );\n\n      internalLogger.info(\"Payout transaction successful: \" + response.data);\n\n      return response.data as PawaPayPayoutTransaction;\n    } catch (error) {\n\n      internalLogger.error(\"Payout transaction failed: \" + error);\n\n      return this.networkHandler.handleErrors(error);\n    }\n\n  }\n\n  /**\n   * Asynchronously processes a bulk payout transaction request by sending multiple payout transactions to the PawaPay service.\n   * Each transaction is formatted according to the requirements before sending. This method is useful for processing multiple\n   * payouts in a single operation, improving efficiency and reducing the number of individual requests.\n   *\n   * @param {PayoutTransaction[]} transactions - An array of `PayoutTransaction` objects representing the individual transactions to be processed in bulk.\n   *\n   * @returns {Promise<PawaPayPayoutTransaction[] | PawaPayNetworkResponse>} A promise that resolves to an array of `PawaPayPayoutTransaction` objects if the bulk payout is successfully processed.\n   * Each object in the array represents the response for the corresponding payout transaction. If an error occurs during the process,\n   * the promise resolves to an unknown type, and the error is handled by the `networkHandler`'s error handling method.\n   */\n\n  async sendBulkPayout(transactions: PayoutTransaction[]): Promise<PawaPayPayoutTransaction[] | PawaPayNetworkResponse> {\n    try {\n\n      const formattedTransactions = transactions.map(transaction => {\n        return {\n          payoutId: transaction.payoutId,\n          amount: transaction.amount.toString(),\n          currency: transaction.currency,\n          correspondent: transaction.correspondent,\n          recipient: {\n            type: \"MSISDN\",\n            address: { value: this.pawapayBaseService.formatPhoneNumber(transaction.phoneNumber) }\n          },\n          customerTimestamp: new Date().toISOString(),\n          statementDescription: transaction.statementDescription\n        };\n      });\n\n      const response = await this.networkHandler.getInstance().post(\n        this.baseEndpoint,\n        { formattedTransactions }\n      );\n\n      console.log(\"Bulk payout transaction successful:\", response.data);\n\n      return response.data as PawaPayPayoutTransaction[];\n    } catch (error) {\n      console.error(\"Bulk payout transaction failed:\", error);\n      return this.networkHandler.handleErrors(error);\n    }\n  }\n\n  /**\n   * Asynchronously retrieves the details of a specific payout transaction by its unique identifier (depositId).\n   * This method constructs the request URL using the depositId and makes a GET request to the PawaPay service endpoint\n   * to obtain the transaction details. It is designed to fetch information for individual payout transactions.\n   *\n   * @param {string} depositId - The unique identifier for the payout transaction whose details are being retrieved.\n   *\n   * @returns {Promise<PawaPayPayoutTransaction | PawaPayNetworkResponse>} A promise that resolves to a `PawaPayPayoutTransaction` object if the payout details are successfully retrieved.\n   * This object contains the details of the specified payout transaction. If an error occurs during the retrieval process,\n   * the promise resolves to an unknown type. The method includes error handling that processes the error using the `networkHandler`'s error handling mechanism.\n   */\n\n  async getPayout(depositId: string): Promise<PawaPayPayoutTransaction | PawaPayNetworkResponse> {\n    try {\n      const response = await this.networkHandler.getInstance().get(`${this.baseEndpoint}/${depositId}`);\n\n      console.log(\"Payout details retrieved successfully:\", response.data);\n\n      return response.data as PawaPayPayoutTransaction;\n    } catch (error) {\n\n      console.error(\"Payout transaction failed:\", error);\n      return this.networkHandler.handleErrors(error);\n    }\n  }\n\n}\n"]}