{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/resources/deposits/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,4EAAoD;AACpD,uCAAqD;AAErD,mFAA2D;AAG3D,2EAAmD;AAIpC,IAAM,QAAQ,GAAd,MAAM,QAAQ;IAIL;IAA0C;IAF/C,YAAY,CAAC;IAE9B,YAAsB,cAA8B,EAAY,kBAAsC;QAAhF,mBAAc,GAAd,cAAc,CAAgB;QAAY,uBAAkB,GAAlB,kBAAkB,CAAoB;QACpG,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IAEH,KAAK,CAAC,WAAW,CAAC,WAA8B;QAC9C,IAAI,CAAC;YAEH,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YAEvF,wBAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,WAAW,EAAE,eAAe,EAAE,WAAW,CAAC,MAAM,EAAE,eAAe,EAAE,WAAW,CAAC,QAAQ,EAAE,cAAc,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;YAExK,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,IAAI,CAC3D,IAAI,CAAC,YAAY,EACjB;gBACE,QAAQ,EAAE,WAAW,CAAC,QAAQ;gBAC9B,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACrC,QAAQ,EAAE,WAAW,CAAC,QAAQ;gBAC9B,aAAa,EAAE,WAAW,CAAC,aAAa;gBACxC,SAAS,EAAE;oBACT,IAAI,EAAE,QAAQ;oBACd,OAAO,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE;iBAChC;gBACD,iBAAiB,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBAC3C,oBAAoB,EAAE,WAAW,CAAC,oBAAoB;aACvD,CACF,CAAC;YACF,wBAAc,CAAC,IAAI,CAAC,gCAAgC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;YAErE,OAAO,QAAQ,CAAC,IAAgC,CAAC;QACnD,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YAExB,wBAAc,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAE1D,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAEjD,CAAC;IAEH,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,KAAK,CAAC,UAAU,CAAC,SAAiB;QAEhC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,SAAS,EAAE,CAAC;YACrD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEvE,wBAAc,CAAC,IAAI,CAAC,yCAAyC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;YAE9E,OAAO,QAAQ,CAAC,IAA4B,CAAC;QAC/C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,wBAAc,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;IAEH,CAAC;IAED;;;;;;;;;;;;;OAaG;IAEH,KAAK,CAAC,cAAc,CAAC,SAAiB;QACpC,IAAI,CAAC;YAEH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,2BAA2B,EAAE;gBACzF,SAAS,EAAE,SAAS;aACrB,CAAC,CAAC;YAEH,wBAAc,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAEtC,OAAO,IAA8B,CAAC;QACxC,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,wBAAc,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACrC,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;CAEF,CAAA;AA9HoB,QAAQ;IAF5B,IAAA,yBAAc,GAAE;IAChB,IAAA,oBAAS,GAAE;qCAK4B,wBAAc,EAAgC,4BAAkB;GAJnF,QAAQ,CA8H5B;kBA9HoB,QAAQ","sourcesContent":["import NetworkHandler from \"@config/networkManager\";\nimport { autoInjectable, singleton } from \"tsyringe\";\n\nimport PawapayBaseService from \"@utils/pawapayBaseService\";\nimport { PawaPayPayoutTransaction, PaymentTransaction, PayoutTransaction, ResendCallbackResponse } from \"types/payout\";\nimport { PawaPayNetworkResponse } from \"types/pawaPayErrorResponse\";\nimport internalLogger from \"@utils/internalLogger\";\n\n@autoInjectable()\n@singleton()\nexport default class Deposits {\n\n  private readonly baseEndpoint;\n\n  constructor(protected networkHandler: NetworkHandler, protected pawapayBaseService: PawapayBaseService) {\n    this.baseEndpoint = \"/deposits\";\n  }\n\n  /**\n   * Asynchronously sends a payout transaction to a specified recipient using the PawaPay service.\n   * This method formats the recipient's phone number, constructs the payout request payload,\n   * and sends it to the PawaPay payout service endpoint. It logs the transaction details and\n   * handles any potential errors during the transaction process.\n   *\n   * @param {PayoutTransaction} transaction - An object containing the details of the payout transaction,\n   * including the recipient's phone number, payout amount, currency, payout ID, correspondent, and statement description.\n   *\n   * @returns {Promise<PawaPayPayoutTransaction | PawaPayNetworkResponse>} A promise that resolves to the response data\n   * from the PawaPay service if the transaction is successfully processed. If an error occurs during\n   * the process, the promise resolves to an unknown type, and the error is handled by the `networkHandler`'s error handling method.\n   *\n   * @throws {PawaPayNetworkResponse} The method catches and handles any errors that occur during the execution of the transaction.\n   * These errors are processed by the `networkHandler.handleErrors` method, which might throw errors based on its implementation.\n   *\n   * sendDeposit(transactionDetails)\n   *   .then(response => console.log('Payout transaction successful:', response))\n   *   .catch(error => console.error('Payout transaction failed:', error));\n   */\n\n  async sendDeposit(transaction: PayoutTransaction): Promise<PawaPayPayoutTransaction | PawaPayNetworkResponse> {\n    try {\n\n      const phoneNumber = this.pawapayBaseService.formatPhoneNumber(transaction.phoneNumber);\n\n      internalLogger.info(\"Sending payout to\", phoneNumber, \"the amount of\", transaction.amount, \"with payoutId\", transaction.payoutId, \"and currency\", transaction.currency);\n\n      const response = await this.networkHandler.getInstance().post(\n        this.baseEndpoint,\n        {\n          payoutId: transaction.payoutId,\n          amount: transaction.amount.toString(),\n          currency: transaction.currency,\n          correspondent: transaction.correspondent,\n          recipient: {\n            type: \"MSISDN\",\n            address: { value: phoneNumber }\n          },\n          customerTimestamp: new Date().toISOString(),\n          statementDescription: transaction.statementDescription\n        }\n      );\n      internalLogger.info(\"Payout transaction successful:\", response.data);\n\n      return response.data as PawaPayPayoutTransaction;\n    } catch (error: unknown) {\n\n      internalLogger.error(\"Payout transaction failed:\", error);\n\n      return this.networkHandler.handleErrors(error);\n\n    }\n\n  }\n\n  /**\n   * Asynchronously retrieves details of a specific deposit transaction by its unique identifier.\n   * This method constructs the request endpoint using the deposit ID, makes a GET request to the\n   * PawaPay service endpoint, and aims to return the transaction details.\n   *\n   * @param {string} depositId - The unique identifier for the deposit transaction that is being retrieved.\n   *\n   * @returns {Promise<PaymentTransaction[] | PawaPayNetworkResponse>} A promise that resolves to an array of `PaymentTransaction` objects\n   * if the retrieval is successful. The array contains the details of the deposit transaction identified by the given depositId.\n   * If an error occurs during the process, the promise resolves to an unknown type, and the error is handled by the\n   * `networkHandler`'s error handling method.\n   *\n   * @throws {PawaPayNetworkResponse} Catches and handles any errors that occur during the execution of the retrieval process.\n   * The errors are processed by the `networkHandler.handleErrors` method, which might throw errors based on its implementation.\n   */\n  async getDeposit(depositId: string): Promise<PaymentTransaction[] | PawaPayNetworkResponse> {\n\n    try {\n      const endPoint = this.baseEndpoint + `/${depositId}`;\n      const response = await this.networkHandler.getInstance().get(endPoint);\n\n      internalLogger.info(\"Deposit details retrieved successfully:\", response.data);\n\n      return response.data as PaymentTransaction[];\n    } catch (error) {\n      internalLogger.error(\"Payout transaction failed:\", error);\n      return this.networkHandler.handleErrors(error);\n    }\n\n  }\n\n  /**\n   * Asynchronously requests the resend of a callback for a specific deposit transaction using its unique identifier.\n   * This method sends a POST request to a specified endpoint dedicated to triggering the resend of callbacks for transactions.\n   * The function is designed to facilitate situations where the initial callback from a transaction might have been missed or not received.\n   *\n   * @param {string} depositId - The unique identifier of the deposit transaction for which the callback resend is requested.\n   *\n   * @returns {Promise<ResendCallbackResponse | PawaPayNetworkResponse>} A promise that resolves to the response from the service regarding the callback resend operation.\n   * The `ResendCallbackResponse` type is expected to contain details about the success or specifics of the resend request.\n   * If an error occurs during the operation, the promise resolves to an unknown type. The method includes error handling that processes the error using the `networkHandler`'s error handling mechanism.\n   *\n   * @throws {PawaPayNetworkResponse} Catches and handles any errors that occur during the execution of the callback resend request.\n   * These errors are processed by the `networkHandler.handleErrors` method, which may throw errors based on its implementation.\n   */\n\n  async resendCallback(depositId: string): Promise<ResendCallbackResponse | PawaPayNetworkResponse> {\n    try {\n\n      const { data } = await this.networkHandler.getInstance().post(`/deposits/resend-callback`, {\n        depositId: depositId\n      });\n\n      internalLogger.info(\"RESPONSE\", data);\n\n      return data as ResendCallbackResponse;\n    } catch (error: unknown) {\n      internalLogger.error(\"ERROR\", error);\n      return this.networkHandler.handleErrors(error);\n    }\n  }\n\n}\n"]}