{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/resources/refunds/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,uCAAqD;AACrD,4EAAoD;AAGpD,2EAAmD;AAIpC,IAAM,OAAO,GAAb,MAAM,OAAO;IAIJ;IAFL,YAAY,CAAC;IAE9B,YAAsB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAClD,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC;IACjC,CAAC;IAED;;;;;;;;;;;OAWG;IAEH,KAAK,CAAC,mBAAmB,CAAC,UAAe;QACvC,IAAI,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,IAAI,CAC3D,IAAI,CAAC,YAAY,EACjB;gBACE,QAAQ,EAAE,UAAU,CAAC,QAAQ;gBAC7B,SAAS,EAAE,UAAU,CAAC,SAAS;aAChC,CACF,CAAC;YAEF,wBAAc,CAAC,IAAI,CAAC,sCAAsC,GAAG,UAAU,CAAC,SAAS,GAAG,iBAAiB,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;YAE7H,OAAO,QAAQ,CAAC,IAAsB,CAAC;QAEzC,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,wBAAc,CAAC,KAAK,CAAC,yBAAyB,GAAG,KAAK,CAAC,CAAC;YACxD,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAED;;;;;;;;;;OAUG;IAEH,KAAK,CAAC,eAAe,CAAC,QAAgB;QACpC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,QAAQ,EAAE,CAAC;YACpD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEvE,wBAAc,CAAC,IAAI,CAAC,yCAAyC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;YAE/E,OAAO,QAAQ,CAAC,IAAyB,CAAC;QAC5C,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,wBAAc,CAAC,KAAK,CAAC,6BAA6B,GAAG,KAAK,CAAC,CAAC;YAC5D,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;CAEF,CAAA;AApEoB,OAAO;IAF3B,IAAA,oBAAS,GAAE;IACX,IAAA,yBAAc,GAAE;qCAKuB,wBAAc;GAJjC,OAAO,CAoE3B;kBApEoB,OAAO","sourcesContent":["import { autoInjectable, singleton } from \"tsyringe\";\nimport NetworkHandler from \"@config/networkManager\";\nimport { RefundResponse, RefundTransaction } from \"types/payout\";\nimport { PawaPayNetworkResponse } from \"types/pawaPayErrorResponse\";\nimport internalLogger from \"@utils/internalLogger\";\n\n@singleton()\n@autoInjectable()\nexport default class Refunds {\n\n  private readonly baseEndpoint;\n\n  constructor(protected networkHandler: NetworkHandler) {\n    this.baseEndpoint = \"/refunds\";\n  }\n\n  /**\n   * Asynchronously submits a request to create a refund for a specific transaction. This method sends the refund details,\n   * including the unique identifiers for the refund and the original deposit, to a designated service endpoint for processing.\n   * It is intended to initiate the refund process for transactions that meet the criteria for refunding.\n   *\n   * @param {any} refundData - An object containing the refund request details. The structure of this object includes\n   * `refundId`, the unique identifier for the refund request, and `depositId`, the unique identifier of the original deposit transaction to be refunded.\n   *\n   * @returns {Promise<RefundResponse | PawaPayNetworkResponse>} A promise that resolves to a `RefundResponse` object if the refund request is successfully processed.\n   * The `RefundResponse` type should detail the outcome of the refund request. In case of an error during the request processing,\n   * the promise resolves to an unknown type, with the error handled by the `networkHandler`'s error handling mechanism.\n   */\n\n  async createRefundRequest(refundData: any): Promise<RefundResponse | PawaPayNetworkResponse> {\n    try {\n\n      const response = await this.networkHandler.getInstance().post(\n        this.baseEndpoint,\n        {\n          refundId: refundData.refundId,\n          depositId: refundData.depositId\n        }\n      );\n\n      internalLogger.info(\"Sending refund request for deposit: \" + refundData.depositId + \"with refundId: \" + refundData.refundId);\n\n      return response.data as RefundResponse;\n\n    } catch (error: unknown) {\n      internalLogger.error(\"Refund request failed: \" + error);\n      return this.networkHandler.handleErrors(error);\n    }\n  }\n\n  /**\n   * Asynchronously retrieves the status of a specific refund transaction by its unique identifier (refundId).\n   * This method constructs the request URL using the refundId and makes a GET request to the service endpoint\n   * to fetch the current status of the refund transaction. It provides a means to track the progress or outcome of refund requests.\n   *\n   * @param {string} refundId - The unique identifier for the refund transaction whose status is being queried.\n   *\n   * @returns {Promise<RefundTransaction | PawaPayNetworkResponse>} A promise that resolves to a `RefundTransaction` object if the refund status is successfully retrieved.\n   * The `RefundTransaction` type is expected to contain comprehensive details about the refund transaction, including its current status.\n   * If an error occurs during the retrieval process, the promise resolves to an unknown type. Errors are handled using the `networkHandler`'s error handling process.\n   */\n\n  async getRefundStatus(refundId: string): Promise<RefundTransaction | PawaPayNetworkResponse> {\n    try {\n      const endPoint = this.baseEndpoint + `/${refundId}`;\n      const response = await this.networkHandler.getInstance().get(endPoint);\n\n      internalLogger.info(\"Refund details retrieved successfully: \" + response.data);\n\n      return response.data as RefundTransaction;\n    } catch (error: unknown) {\n      internalLogger.error(\"Refund transaction failed: \" + error);\n      return this.networkHandler.handleErrors(error);\n    }\n  }\n\n}\n"]}