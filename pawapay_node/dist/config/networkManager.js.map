{"version":3,"file":"networkManager.js","sourceRoot":"","sources":["../../src/config/networkManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,kDAAkE;AAClE,uCAAqD;AACrD,kEAA0C;AAE1C,2EAAmD;AAEnD,IAEM,cAAc,GAFpB,MAEM,cAAc;IACD,aAAa,CAAgB;IAE9C;QACE,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;QAC3C,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;QAEzC,MAAM,OAAO,GAAG,WAAW,KAAK,YAAY,CAAC,CAAC;YAC5C,mBAAS,CAAC,IAAI,CAAC,mBAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;YACjD,mBAAS,CAAC,IAAI,CAAC,mBAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC;QAErD,MAAM,OAAO,GAAG,EAAyB,CAAC;QAE1C,IAAI,UAAU,EAAE,CAAC;YACf,OAAO,CAAC,aAAa,GAAG,UAAU,UAAU,EAAE,CAAC;QACjD,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,eAAK,CAAC,MAAM,CAAC;YAChC,OAAO;YACP,OAAO;SACR,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAEM,YAAY,CAAC,KAAc;QAChC,wBAAc,CAAC,KAAK,CAAC,iBAAiB,GAAG,KAAK,CAAC,CAAC;QAEhD,IAAI,YAAY,GAAG,2BAA2B,CAAC;QAC/C,IAAI,UAAU,GAAG,GAAG,CAAC;QACrB,IAAI,WAAW,GAAG,IAAI,CAAC;QAEvB,IAAI,eAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;YAChD,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;YAEnC,IAAI,CAAC;gBACH,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,IAA6C,CAAC;gBAC1E,YAAY,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,IAAI,YAAY,CAAC;gBAC1D,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrC,CAAC;YAAC,MAAM,CAAC;gBACP,YAAY,GAAG,gCAAgC,CAAC;YAClD,CAAC;QACH,CAAC;QAED,OAAO;YACL,YAAY;YACZ,UAAU;YACV,WAAW;SACZ,CAAC;IACJ,CAAC;IAEO,iBAAiB;QACvB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAC1C,CAAC,QAAQ,EAAE,EAAE,CACX,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACtB,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,EACJ,CAAC,KAAK,EAAE,EAAE;YACR,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE;gBAC/B,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CACF,CAAC;IACJ,CAAC;CACF,CAAA;AApEK,cAAc;IAFnB,IAAA,yBAAc,GAAE;IAChB,IAAA,oBAAS,GAAE;;GACN,cAAc,CAoEnB;AAED,kBAAe,cAAc,CAAC","sourcesContent":["import axios, { AxiosInstance, AxiosRequestHeaders } from \"axios\";\nimport { autoInjectable, singleton } from \"tsyringe\";\nimport Constants from \"@config/Constants\";\nimport { PawaPayNetworkResponse } from \"types/pawaPayErrorResponse\";\nimport internalLogger from \"@utils/internalLogger\";\n\n@autoInjectable()\n@singleton()\nclass NetworkHandler {\n  private readonly axiosInstance: AxiosInstance;\n\n  constructor() {\n    const pawaPayJwt = process.env.PAWAPAY_JWT;\n    const environment = process.env.Node_ENV;\n\n    const baseURL = environment === \"production\" ?\n      Constants.URLs[Constants[\"_PAWA_PAY_PROD_URL\"]] :\n      Constants.URLs[Constants[\"_PAWA_PAY_SANDBOX_URL\"]];\n\n    const headers = {} as AxiosRequestHeaders;\n\n    if (pawaPayJwt) {\n      headers.Authorization = `Bearer ${pawaPayJwt}`;\n    }\n\n    this.axiosInstance = axios.create({\n      baseURL,\n      headers\n    });\n\n    this.setupInterceptors();\n  }\n\n  public getInstance(): AxiosInstance {\n    return this.axiosInstance;\n  }\n\n  public handleErrors(error: unknown): PawaPayNetworkResponse {\n    internalLogger.error(\"Error occurred \" + error);\n\n    let errorMessage = \"An unknown error occurred\";\n    let statusCode = 500;\n    let errorObject = \"{}\";\n\n    if (axios.isAxiosError(error) && error.response) {\n      statusCode = error.response.status;\n\n      try {\n        const data = error.response.data as { message?: string; error?: string; };\n        errorMessage = data.message || data.error || errorMessage;\n        errorObject = JSON.stringify(data);\n      } catch {\n        errorMessage = \"Failed to parse error response\";\n      }\n    }\n\n    return {\n      errorMessage,\n      statusCode,\n      errorObject\n    };\n  }\n\n  private setupInterceptors(): void {\n    this.axiosInstance.interceptors.response.use(\n      (response) =>\n        new Promise((resolve) => {\n          resolve(response);\n        }),\n      (error) => {\n        return new Promise((_, reject) => {\n          reject(error);\n        });\n      }\n    );\n  }\n}\n\nexport default NetworkHandler;\n"]}